/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-03 21:46:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import conexao.DatabaseConnection;

public final class processar_005fcadastro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("conexao.DatabaseConnection");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Cadastro de Clientes</title>\n");
      out.write("        <!-- Link para o arquivo CSS externo -->\n");
      out.write("        <link rel=\"stylesheet\" href=\"style.css?v=1.4\">\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

            // Inicializa as variáveis de controle
            boolean cadastroSucesso = false;
            String nome = request.getParameter("nome");
            
            String cpf = request.getParameter("cpf");
            cpf = cpf.replaceAll("(\\d{3})(\\d{3})(\\d{3})(\\d{2})", "$1.$2.$3-$4");

            
            String telefone = request.getParameter("telefone");
            String email = request.getParameter("email");
            String endereco = request.getParameter("endereco");
            String observacao = request.getParameter("observacao");

            String cpfError = null;
            String emailError = null;

            if (nome != null && cpf != null && email != null) {
                try {
                    Connection conecta = DatabaseConnection.getConnection();

                    // Verifica duplicidade
                    String checkSql = "SELECT * FROM clientes WHERE cpf = ? OR email = ?";
                    PreparedStatement checkSt = conecta.prepareStatement(checkSql);
                    checkSt.setString(1, cpf);
                    checkSt.setString(2, email);
                    ResultSet rs = checkSt.executeQuery();

                    boolean isDuplicate = false;

                    while (rs.next()) {
                        if (rs.getString("cpf").equals(cpf)) {
                            cpfError = "CPF já cadastrado.";
                            isDuplicate = true;
                        }
                        if (rs.getString("email").equals(email)) {
                            emailError = "Email já cadastrado.";
                            isDuplicate = true;
                        }
                    }

                    if (!isDuplicate) {
                        String sql = "INSERT INTO clientes (nome, cpf, telefone, email, endereco, observacao) VALUES (?, ?, ?, ?, ?, ?)";
                        PreparedStatement st = conecta.prepareStatement(sql);
                        st.setString(1, nome);
                        st.setString(2, cpf);
                        st.setString(3, telefone);
                        st.setString(4, email);
                        st.setString(5, endereco);
                        st.setString(6, observacao);

                        int rowsInserted = st.executeUpdate();
                        if (rowsInserted > 0) {
                            cadastroSucesso = true;
                        }
                        st.close();
                    }

                    checkSt.close();
                    conecta.close();
                } catch (Exception e) {
                    e.printStackTrace();
        
      out.write("\n");
      out.write("        <h3>Erro: ");
      out.print( e.getMessage() );
      out.write("</h3>\n");
      out.write("        ");

                }
            }
        
      out.write("\n");
      out.write("\n");
      out.write("        ");
 if (cadastroSucesso) { 
      out.write("\n");
      out.write("        <div class=\"center-container\">\n");
      out.write("            <h1>Cliente cadastrado com sucesso!</h1>\n");
      out.write("            <div>\n");
      out.write("                <a href=\"cadastroCliente.html\" class=\"btn\">Cadastrar novo cliente</a>\n");
      out.write("                <a href=\"paginaInicial.html\" class=\"btn\">Voltar à página inicial</a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        ");
 } else { 
      out.write("\n");
      out.write("        <!-- Formulário de cadastro -->\n");
      out.write("        <form method=\"post\" action=\"\">\n");
      out.write("            <h1>Cadastro de Clientes</h1>\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"nome\">Nome:</label>\n");
      out.write("                <input type=\"text\" name=\"nome\" id=\"nome\" value=\"");
      out.print( nome != null ? nome : "" );
      out.write("\">\n");
      out.write("            </div>\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"cpf\">CPF:</label>\n");
      out.write("                <input type=\"text\" name=\"cpf\" id=\"cpf\" value=\"");
      out.print( cpf != null ? cpf : "" );
      out.write("\">\n");
      out.write("                ");
 if (cpfError != null) { 
      out.write("\n");
      out.write("                <div class=\"error\">");
      out.print( cpfError );
      out.write("</div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </div>\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"email\">Email:</label>\n");
      out.write("                <input type=\"email\" name=\"email\" id=\"email\" value=\"");
      out.print( email != null ? email : "" );
      out.write("\">\n");
      out.write("                ");
 if (emailError != null) { 
      out.write("\n");
      out.write("                <div class=\"error\">");
      out.print( emailError );
      out.write("</div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </div>\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"telefone\">Telefone:</label>\n");
      out.write("                <input type=\"text\" name=\"telefone\" id=\"telefone\" value=\"");
      out.print( telefone != null ? telefone : "" );
      out.write("\">\n");
      out.write("            </div>\n");
      out.write("            <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\n");
      out.write("                <label for=\"endereco\">Endereço:</label>\n");
      out.write("                <input type=\"text\" name=\"endereco\" id=\"endereco\" value=\"");
      out.print( endereco != null ? endereco : "" );
      out.write("\">\n");
      out.write("                <div class=\"error\"></div> <!-- Mensagem de erro reservada -->\n");
      out.write("            </div>\n");
      out.write("            <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\n");
      out.write("                <label for=\"observacao\">Observação:</label>\n");
      out.write("                <input type=\"text\" name=\"observacao\" id=\"observacao\" value=\"");
      out.print( observacao != null ? observacao : "" );
      out.write("\">\n");
      out.write("                <div class=\"error\"></div> <!-- Mensagem de erro reservada -->\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            <button type=\"submit\" class=\"btn\">Cadastrar</button>\n");
      out.write("        </form>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
