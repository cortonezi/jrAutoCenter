/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-02 22:55:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import conexao.DatabaseConnection;

public final class pesquisarProdutos_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.math.BigDecimal");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("conexao.DatabaseConnection");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"pt-BR\">\n");
      out.write("    <head>\n");
      out.write("        <meta charset=\"UTF-8\">\n");
      out.write("        <title>Resultados da Pesquisa</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"style.css?v=1.1\">\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <h1>Resultados da Pesquisa</h1>\n");
      out.write("            <table>\n");
      out.write("                <thead>\n");
      out.write("                    <tr>\n");
      out.write("                        <th>ID</th>\n");
      out.write("                        <th>Nome do Produto</th>\n");
      out.write("                        <th>Código do Produto (SKU)</th>\n");
      out.write("                        <th>Categoria</th>\n");
      out.write("                        <th>Marca</th>\n");
      out.write("                        <th>Descrição</th>\n");
      out.write("                        <th>Compatibilidade</th>\n");
      out.write("                        <th>Estoque</th>\n");
      out.write("                        <th>Estoque Mínimo</th>\n");
      out.write("                        <th>Preço de Custo</th>\n");
      out.write("                        <th>Preço de Venda</th>\n");
      out.write("                        <th>Código de Barras</th>\n");
      out.write("                        <th>Fornecedor</th>\n");
      out.write("                        <th>Data de Cadastro</th>\n");
      out.write("                    </tr>\n");
      out.write("                </thead>\n");
      out.write("                <tbody>\n");
      out.write("                    ");

                        String categoria = request.getParameter("categoria");
                        String nomeProduto = request.getParameter("nome_produto");
                        String codigoProduto = request.getParameter("codigo_produto");
                        String marca = request.getParameter("marca");
                        String precoMin = request.getParameter("preco_min");
                        String precoMax = request.getParameter("preco_max");

                        if (categoria != null && !categoria.isEmpty()) {
                            try {
                                Connection conecta = DatabaseConnection.getConnection();
                                String sql = "SELECT * FROM produtos WHERE categoria = ?";
                                if (nomeProduto != null && !nomeProduto.isEmpty()) {
                                    sql += " AND nome_produto LIKE ?";
                                }
                                if (codigoProduto != null && !codigoProduto.isEmpty()) {
                                    sql += " AND codigo_produto = ?";
                                }
                                if (marca != null && !marca.isEmpty()) {
                                    sql += " AND marca LIKE ?";
                                }
                                if (precoMin != null && !precoMin.isEmpty()) {
                                    sql += " AND preco_venda >= ?";
                                }
                                if (precoMax != null && !precoMax.isEmpty()) {
                                    sql += " AND preco_venda <= ?";
                                }

                                PreparedStatement st = conecta.prepareStatement(sql);
                                st.setString(1, categoria);
                                int index = 2;
                                if (nomeProduto != null && !nomeProduto.isEmpty()) {
                                    st.setString(index++, "%" + nomeProduto + "%");
                                }
                                if (codigoProduto != null && !codigoProduto.isEmpty()) {
                                    st.setString(index++, codigoProduto);
                                }
                                if (marca != null && !marca.isEmpty()) {
                                    st.setString(index++, "%" + marca + "%");
                                }
                                if (precoMin != null && !precoMin.isEmpty()) {
                                    st.setBigDecimal(index++, new BigDecimal(precoMin));
                                }
                                if (precoMax != null && !precoMax.isEmpty()) {
                                    st.setBigDecimal(index++, new BigDecimal(precoMax));
                                }

                                ResultSet rs = st.executeQuery();
                                boolean hasResults = false;

                                while (rs.next()) {
                                    hasResults = true;

                                    // Formata a data no padrão brasileiro
                                    Date dataCadastro = rs.getTimestamp("data_cadastro");
                                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                                    String dataFormatada = sdf.format(dataCadastro);
                    
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td>");
      out.print( rs.getInt("id_produto") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("nome_produto") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("codigo_produto") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("categoria") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("marca") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("descricao") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("compatibilidade") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getInt("estoque") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getInt("estoque_minimo") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getBigDecimal("preco_custo") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getBigDecimal("preco_venda") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("codigo_barras") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( rs.getString("fornecedor") );
      out.write("</td>\n");
      out.write("                        <td>");
      out.print( dataFormatada );
      out.write("</td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");

                                }

                                if (!hasResults) {
                    
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td colspan=\"14\">Nenhum produto encontrado.</td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");

                                }

                                rs.close();
                                st.close();
                                conecta.close();
                            } catch (Exception e) {
                    
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td colspan=\"14\">Erro: ");
      out.print( e.getMessage() );
      out.write("</td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");

                            }
                        } else {
                    
      out.write("\n");
      out.write("                    <tr>\n");
      out.write("                        <td colspan=\"14\">Selecione uma categoria para a pesquisa.</td>\n");
      out.write("                    </tr>\n");
      out.write("                    ");

                        }
                    
      out.write("\n");
      out.write("                </tbody>\n");
      out.write("            </table>\n");
      out.write("\n");
      out.write("            <div class=\"center-container\">\n");
      out.write("                <div>\n");
      out.write("                    <!-- Botão para voltar à página de produtos -->\n");
      out.write("                    <a href=\"produtos.html\" class=\"btn\">Voltar para Pesquisa</a>\n");
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
