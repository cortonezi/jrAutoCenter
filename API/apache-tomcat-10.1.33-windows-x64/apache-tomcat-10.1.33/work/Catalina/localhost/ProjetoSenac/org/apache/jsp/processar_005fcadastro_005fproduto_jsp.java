/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-02 22:24:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import conexao.DatabaseConnection;

public final class processar_005fcadastro_005fproduto_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("conexao.DatabaseConnection");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta charset=\"UTF-8\">\n");
      out.write("        <title>Cadastro de Produto</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"style.css?v=1.5\">\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

            // Inicializa variáveis de controle
            boolean cadastroSucesso = false;
            String nomeProduto = request.getParameter("nome_produto");
            String codigoProduto = request.getParameter("codigo_produto");
            String categoria = request.getParameter("categoria");
            String marca = request.getParameter("marca");
            String descricao = request.getParameter("descricao");
            String compatibilidade = request.getParameter("compatibilidade");
            String estoqueStr = request.getParameter("estoque");
            String estoqueMinimoStr = request.getParameter("estoque_minimo");
            String precoCustoStr = request.getParameter("preco_custo");
            String precoVendaStr = request.getParameter("preco_venda");
            String codigoBarras = request.getParameter("codigo_barras");
            String fornecedor = request.getParameter("fornecedor");

            String codigoProdutoError = null;
            String codigoBarrasError = null;

            if (nomeProduto != null && codigoProduto != null && categoria != null) {
                try {
                    Connection conecta = DatabaseConnection.getConnection();

                    // Verifica duplicidade
                    String checkSql = "SELECT * FROM produtos WHERE codigo_produto = ? OR codigo_barras = ?";
                    PreparedStatement checkSt = conecta.prepareStatement(checkSql);
                    checkSt.setString(1, codigoProduto);
                    checkSt.setString(2, codigoBarras);
                    ResultSet rs = checkSt.executeQuery();

                    boolean isDuplicate = false;

                    while (rs.next()) {
                        if (rs.getString("codigo_produto").equals(codigoProduto)) {
                            codigoProdutoError = "Código do Produto já cadastrado.";
                            isDuplicate = true;
                        }
                        if (codigoBarras != null && rs.getString("codigo_barras").equals(codigoBarras)) {
                            codigoBarrasError = "Código de Barras já cadastrado.";
                            isDuplicate = true;
                        }
                    }

                    if (!isDuplicate) {
                        String sql = "INSERT INTO produtos (nome_produto, codigo_produto, categoria, marca, descricao, compatibilidade, estoque, estoque_minimo, preco_custo, preco_venda, codigo_barras, fornecedor) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        PreparedStatement st = conecta.prepareStatement(sql);
                        st.setString(1, nomeProduto);
                        st.setString(2, codigoProduto);
                        st.setString(3, categoria);
                        st.setString(4, marca);
                        st.setString(5, descricao);
                        st.setString(6, compatibilidade);
                        st.setInt(7, Integer.parseInt(estoqueStr));
                        st.setInt(8, Integer.parseInt(estoqueMinimoStr));
                        st.setBigDecimal(9, new java.math.BigDecimal(precoCustoStr));
                        st.setBigDecimal(10, new java.math.BigDecimal(precoVendaStr));
                        st.setString(11, codigoBarras);
                        st.setString(12, fornecedor);

                        int rowsInserted = st.executeUpdate();
                        if (rowsInserted > 0) {
                            cadastroSucesso = true;
                        }
                        st.close();
                    }

                    checkSt.close();
                    conecta.close();
                } catch (Exception e) {
                    e.printStackTrace();
        
      out.write("\n");
      out.write("        <h3>Erro: ");
      out.print( e.getMessage() );
      out.write("</h3>\n");
      out.write("        ");

                }
            }
        
      out.write("\n");
      out.write("\n");
      out.write("        ");
 if (cadastroSucesso) { 
      out.write("\n");
      out.write("        <!-- Mensagem de sucesso -->\n");
      out.write("        \n");
      out.write("        <div class=\"center-container\">\n");
      out.write("            <h1>Produto cadastrado com sucesso!</h1>\n");
      out.write("            <div>\n");
      out.write("                <a href=\"cadastroProduto.html\" class=\"btn\">Cadastrar Novo Produto</a>\n");
      out.write("                <a href=\"paginaInicial.html\" class=\"btn\">Voltar à página inicial</a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("        ");
 } else { 
      out.write("\n");
      out.write("        <!-- Exibe formulário com erros -->\n");
      out.write("        <form action=\"processar_cadastro_produto.jsp\" method=\"post\">\n");
      out.write("    <h1>Cadastro de Produtos</h1>\n");
      out.write("\n");
      out.write("    <!-- Nome do Produto -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"nome_produto\">Nome do Produto</label>\n");
      out.write("        <input type=\"text\" id=\"nome_produto\" name=\"nome_produto\" value=\"");
      out.print( nomeProduto != null ? nomeProduto : "" );
      out.write("\" required>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Código do Produto -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"codigo_produto\">Código do Produto (SKU)</label>\n");
      out.write("        <input type=\"text\" id=\"codigo_produto\" name=\"codigo_produto\" value=\"");
      out.print( codigoProduto != null ? codigoProduto : "" );
      out.write("\" required>\n");
      out.write("        ");
 if (codigoProdutoError != null) { 
      out.write("\n");
      out.write("        <div class=\"error\">");
      out.print( codigoProdutoError );
      out.write("</div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Categoria -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"categoria\">Categoria</label>\n");
      out.write("        <select id=\"categoria\" name=\"categoria\" required>\n");
      out.write("            <option value=\"\">Selecione uma categoria</option>\n");
      out.write("            <option value=\"oleos\" ");
      out.print( "oleos".equals(categoria) ? "selected" : "" );
      out.write(">Óleos e Lubrificantes</option>\n");
      out.write("            <option value=\"pneus\" ");
      out.print( "pneus".equals(categoria) ? "selected" : "" );
      out.write(">Pneus</option>\n");
      out.write("            <option value=\"baterias\" ");
      out.print( "baterias".equals(categoria) ? "selected" : "" );
      out.write(">Baterias</option>\n");
      out.write("            <option value=\"filtros\" ");
      out.print( "filtros".equals(categoria) ? "selected" : "" );
      out.write(">Filtros</option>\n");
      out.write("            <option value=\"acessorios\" ");
      out.print( "acessorios".equals(categoria) ? "selected" : "" );
      out.write(">Acessórios</option>\n");
      out.write("        </select>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Marca -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"marca\">Marca</label>\n");
      out.write("        <input type=\"text\" id=\"marca\" name=\"marca\" value=\"");
      out.print( marca != null ? marca : "" );
      out.write("\" required>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Descrição -->\n");
      out.write("    <div style=\"grid-column: 1 / -1;\">\n");
      out.write("        <label for=\"descricao\">Descrição</label>\n");
      out.write("        <textarea id=\"descricao\" name=\"descricao\" required>");
      out.print( descricao != null ? descricao : "" );
      out.write("</textarea>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Compatibilidade -->\n");
      out.write("    <div style=\"grid-column: 1 / -1;\">\n");
      out.write("        <label for=\"compatibilidade\">Compatibilidade</label>\n");
      out.write("        <textarea id=\"compatibilidade\" name=\"compatibilidade\">");
      out.print( compatibilidade != null ? compatibilidade : "" );
      out.write("</textarea>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Quantidade em Estoque -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"estoque\">Quantidade em Estoque</label>\n");
      out.write("        <input type=\"number\" id=\"estoque\" name=\"estoque\" value=\"");
      out.print( estoqueStr != null ? estoqueStr : "" );
      out.write("\" required>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Estoque Mínimo -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"estoque_minimo\">Estoque Mínimo</label>\n");
      out.write("        <input type=\"number\" id=\"estoque_minimo\" name=\"estoque_minimo\" value=\"");
      out.print( estoqueMinimoStr != null ? estoqueMinimoStr : "" );
      out.write("\" required>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Preço de Custo -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"preco_custo\">Preço de Custo (R$)</label>\n");
      out.write("        <input type=\"number\" id=\"preco_custo\" name=\"preco_custo\" value=\"");
      out.print( precoCustoStr != null ? precoCustoStr : "" );
      out.write("\" step=\"0.01\" required>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Preço de Venda -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"preco_venda\">Preço de Venda (R$)</label>\n");
      out.write("        <input type=\"number\" id=\"preco_venda\" name=\"preco_venda\" value=\"");
      out.print( precoVendaStr != null ? precoVendaStr : "" );
      out.write("\" step=\"0.01\" required>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Código de Barras -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"codigo_barras\">Código de Barras</label>\n");
      out.write("        <input type=\"text\" id=\"codigo_barras\" name=\"codigo_barras\" value=\"");
      out.print( codigoBarras != null ? codigoBarras : "" );
      out.write("\">\n");
      out.write("        ");
 if (codigoBarrasError != null) { 
      out.write("\n");
      out.write("        <div class=\"error\">");
      out.print( codigoBarrasError );
      out.write("</div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Fornecedor -->\n");
      out.write("    <div>\n");
      out.write("        <label for=\"fornecedor\">Fornecedor</label>\n");
      out.write("        <input type=\"text\" id=\"fornecedor\" name=\"fornecedor\" value=\"");
      out.print( fornecedor != null ? fornecedor : "" );
      out.write("\">\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- Botão de Enviar -->\n");
      out.write("    <button type=\"submit\">Cadastrar Produto</button>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
